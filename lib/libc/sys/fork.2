.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)fork.2	8.1 (Berkeley) 6/4/93
.\" $FreeBSD: src/lib/libc/sys/fork.2,v 1.9.2.6 2002/07/30 19:04:25 silby Exp $
.\" $DragonFly: src/lib/libc/sys/fork.2,v 1.2 2003/06/17 04:26:47 dillon Exp $
.\"
.Dd July 03, 2025
.Dt FORK 2
.Os
.Sh NAME
.Nm fork
.Nd create a new process
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In sys/types.h
.In unistd.h
.Ft pid_t
.Fn fork void
.Sh DESCRIPTION
.Fn Fork
causes creation of a new process.
The new process (child process) is an exact copy of the
calling process (parent process) except for the following:
.Bl -bullet -offset indent
.It
The child process has a unique process ID.
.It
The child process has a different parent
process ID (i.e., the process ID of the parent process).
.It
The child process has its own copy of the parent's descriptors.
These descriptors reference the same underlying objects, so that,
for instance, file pointers in file objects are shared between
the child and the parent, so that an
.Xr lseek 2
on a descriptor in the child process can affect a subsequent
.Xr read 2
or
.Xr write 2
by the parent.
This descriptor copying is also used by the shell to
establish standard input and output for newly created processes
as well as to set up pipes.
Any file descriptors that were marked with the close-on-fork flag,
.Dv FD_CLOFORK
.Po see
.Fn fcntl 2
and
.Dv O_CLOFORK
in
.Fn open 2
.Pc ,
will not be present in the child process, but remain open in the parent.
.It
The child process' resource utilizations
are set to 0; see
.Xr setrlimit 2 .
.It
All interval timers are cleared; see
.Xr setitimer 2 .
.El
.Sh RETURN VALUES
Upon successful completion,
.Fn fork
returns a value
of 0 to the child process and returns the process ID of the child
process to the parent process.  Otherwise, a value of -1 is returned
to the parent process, no child process is created, and the global
variable
.Va errno
is set to indicate the error.
.Sh MULTI-THREADING CONSIDERATIONS
.Fn fork
can create severe issues for multi-threaded programs due to the fact that
the memory state of the child process will record the asynchronous state
of the threads that are running in the parent.
.Fn Fork
will only be synchronous for the specific thread making the call.
In particular,
locks used internally by
.Xr pthread 3
and
.Xr rtld 1
can be caught in a bad state.
To deal with these issues, the pthreads library goes to great lengths
to synchronize internal locks when
a
.Fn fork
call is issued.
The threaded program itself as well as third party libraries used by the
program might or might not properly handle these issues when it comes to
their own internal state.
.Pp
If at all possible, programs should use
.Xr vfork 2
instead of
.Fn fork
when forking for the purposes of issuing an exec of some sort.
Attempting to fork a threaded program without issuing an exec is not
recommended.
Attempting to bypass pthreads and implement threading manually is also
not recommended as it is doubtful that homegrown implementations could
properly deal with rtld races.
.Sh ERRORS
.Fn Fork
will fail and no child process will be created if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The system-imposed limit on the total
number of processes under execution would be exceeded.
The limit is given by the
.Xr sysctl 3
MIB variable
.Dv KERN_MAXPROC .
(The limit is actually ten less than this
except for the super user).
.It Bq Er EAGAIN
The user is not the super user, and
the system-imposed limit
on the total number of
processes under execution by a single user would be exceeded.
The limit is given by the
.Xr sysctl 3
MIB variable
.Dv KERN_MAXPROCPERUID .
.It Bq Er EAGAIN
The user is not the super user, and
the soft resource limit corresponding to the resource parameter
.Dv RLIMIT_NPROC
would be exceeded (see
.Xr getrlimit 2 ) .
.It Bq Er ENOMEM
There is insufficient swap space for the new process.
.El
.Sh SEE ALSO
.Xr execve 2 ,
.Xr rfork 2 ,
.Xr setitimer 2 ,
.Xr setrlimit 2 ,
.Xr vfork 2 ,
.Xr wait 2
.Sh HISTORY
A
.Fn fork
function call appeared in
.At v6 .
