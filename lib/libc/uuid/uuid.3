.\" Copyright (c) 2002 Marcel Moolenaar
.\" Copyright (c) 2002 Hiten Mahesh Pandya
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
.\" AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD: src/lib/libc/uuid/uuid.3,v 1.7 2008/08/14 22:23:16 emax Exp $
.\"
.Dd May 12, 2025
.Dt UUID 3
.Os
.Sh NAME
.Nm uuid_addr_lookup ,
.Nm uuid_compare ,
.Nm uuid_create ,
.Nm uuid_create_nil ,
.Nm uuid_equal ,
.Nm uuid_from_string ,
.Nm uuid_hash ,
.Nm uuid_is_nil ,
.Nm uuid_name_lookup ,
.Nm uuid_reset_lookup ,
.Nm uuid_to_string
.Nd DCE 1.1 compliant UUID functions
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In uuid.h
.Ft void
.Fn uuid_addr_lookup "const uuid_t *u" "char **strp" "uint32_t *status"
.Ft int32_t
.Fn uuid_compare "const uuid_t *uuid1" "const uuid_t *uuid2" "uint32_t *status"
.Ft void
.Fn uuid_create "uuid_t *uuid" "uint32_t *status"
.Ft void
.Fn uuid_create_nil "uuid_t *uuid" "uint32_t *status"
.Ft int32_t
.Fn uuid_equal "const uuid_t *uuid1" "const uuid_t *uuid2" "uint32_t *status"
.Ft void
.Fn uuid_from_string "const char *str" "uuid_t *uuid" "uint32_t *status"
.Ft uint16_t
.Fn uuid_hash "const uuid_t *uuid" "uint32_t *status"
.Ft int32_t
.Fn uuid_is_nil "const uuid_t *uuid" "uint32_t *status"
.Ft void
.Fn uuid_name_lookup "uuid_t *u" "const char *str" "uint32_t *status"
.Ft void
.Fn uuid_reset_lookup "void"
.Ft void
.Fn uuid_to_string "const uuid_t *uuid" "char **str" "uint32_t *status"
.Ft void
.Fn uuid_enc_le "void *buf" "const uuid_t *uuid"
.Ft void
.Fn uuid_dec_le "const void *buf" "uuid_t *uuid"
.Ft void
.Fn uuid_enc_be "void *buf" "const uuid_t *uuid"
.Ft void
.Fn uuid_dec_be "const void *buf" "uuid_t *uuid"
.Sh DESCRIPTION
The family of DCE 1.1 compliant UUID functions allow applications to operate
on universally unique identifiers, or UUIDs.
The
.Fn uuid_create
and
.Fn uuid_create_nil
functions create UUIDs.
The
.Fn uuid_compare ,
.Fn uuid_equal
and
.Fn uuid_is_nil
functions can be used to test UUIDs.
To convert from the binary representation to the string representation or
vice versa, use
.Fn uuid_to_string
or
.Fn uuid_from_string
respectively.
.Pp
The
.Fn uuid_to_string
function will set
.Fa *str
to be a pointer to a newly allocated buffer that holds the string.
This pointer should be passed to
.Xr free 3
to release the buffer after use.
.Pp
The
.Fn uuid_hash
function returns a 16-bit hash value for the specified UUID.
.Pp
String equivalents to UUIDs may be available.
The
.Fn uuid_addr_lookup
function will lookup the symbolic name given a UUID.
The variable
.Fa *strp
should be initialized to
.Dv NULL .
Successive calls to
.Fn uuid_addr_lookup
will free the previous contents prior to doing the lookup.
The last string may be freed by calling the function with a
.Dv NULL
UUID.
If a lookup fails,
.Fa *strp
will be set to
.Dv NULL
and
.Fa *status
(if
.Fa status
is not
.Dv NULL )
will be set to
.Dv uuid_s_not_found .
Otherwise
.Fa *strp
will be assigned to the symbolic name and
.Fa *status
will be set to
.Dv uuid_s_ok .
.Pp
The
.Fn uuid_name_lookup
function will lookup a UUID given a symbolic name.
The contents of the uuid will be zeroed out if a lookup fails.
The
.Fn uuid_reset_lookup
function will clear its in-memory cache of UUID<->NAME conversions.
The next lookup will reload the cache.
.Pp
The
.Fn uuid_enc_le
and
.Fn uuid_enc_be
functions encode a binary representation of a UUID into an octet stream
in little-endian and big-endian byte-order, respectively.
The destination buffer must be pre-allocated by the caller, and must be
large enough to hold the 16-octet binary UUID.
These routines are not part of the DCE RPC API.
They are provided for convenience.
.Pp
The
.Fn uuid_dec_le
and
.Fn uuid_dec_be
functions decode a UUID from an octet stream in little-endian and
big-endian byte-order, respectively.
These routines are not part of the DCE RPC API.
They are provided for convenience.
.Sh RETURN VALUES
The successful or unsuccessful completion of the function is returned in the
.Fa status
argument.
Possible values are:
.Bl -tag -width ".Dv uuid_s_invalid_string_uuid"
.It Dv uuid_s_ok
The function completed successfully.
.It Dv uuid_s_bad_version
The UUID does not have a known version.
.It Dv uuid_s_invalid_string_uuid
The string representation of an UUID is not valid.
.It Dv uuid_s_no_memory
The meaning of the code escaped the writers mind.
.It Dv uuid_s_not_found
A UUID lookup failed.
.El
.Sh FILES
.Bl -tag -width ".Pa /etc/defaults/uuids"
.It Pa /etc/defaults/uuids
A list of UUIDs and their symbolic names provided by the OS vendor.
.It Pa /etc/uuids
A list of UUIDs and their symbolic names provided by the system administrator.
.El
.Sh SEE ALSO
.Xr uuidgen 1 ,
.Xr uuidgen 2 ,
.Xr uuids 5
.Sh STANDARDS
The UUID functions conform to the DCE 1.1 RPC specification.
