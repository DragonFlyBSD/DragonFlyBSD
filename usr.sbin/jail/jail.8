.\"
.\" Copyright (c) 2000 Robert N. M. Watson
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.\" ----------------------------------------------------------------------------
.\" "THE BEER-WARE LICENSE" (Revision 42):
.\" <phk@FreeBSD.ORG> wrote this file.  As long as you retain this notice you
.\" can do whatever you want with this stuff. If we meet some day, and you think
.\" this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
.\" ----------------------------------------------------------------------------
.\"
.\"
.Dd March 19, 2025
.Dt JAIL 8
.Os
.Sh NAME
.Nm jail
.Nd "imprison process and its descendants"
.Sh SYNOPSIS
.Nm
.Op Fl i
.Op Fl l u Ar username | Fl U Ar username
.Ar path hostname ip-list command ...
.Sh DESCRIPTION
The
.Nm
command imprisons a process and all future descendants.
.Pp
The options are as follows:
.Bl -tag -width ".Fl u Ar username"
.It Fl i
Output the jail identifier of the newly created jail.
.It Fl l
Run program in the clean environment.
The environment is discarded except for
.Ev HOME , SHELL , TERM
and
.Ev USER .
.Ev HOME
and
.Ev SHELL
are set to the target login's default values.
.Ev USER
is set to the target login.
.Ev TERM
is imported from the current environment.
The environment variables from the login class capability database for the
target login are also set.
.It Fl u Ar username
The user name as whom the
.Ar command
should run.
.It Fl U Ar username
The user name from jailed environment as whom the
.Ar command
should run.
.It Ar path
Directory which is to be the root of the prison.
.It Ar hostname
Hostname of the prison.
.It Ar ip-list
Comma separated IP list assigned to the prison.
.It Ar command
Pathname of the program which is to be executed.
.El
.Pp
Please see the
.Xr jail 2
man page for further details.
.Sh EXAMPLES
.Ss "Setting Up a Jail Directory Tree"
This example shows how to setup a jail directory tree
containing an entire
.Dx
distribution, provided that you built world before already:
.Bd -literal
D=/here/is/the/jail
cd /usr/src
mkdir -p $D
make installworld DESTDIR=$D -DNO_INITRD
cd etc
make distribution DESTDIR=$D
cd $D
ln -sf dev/null boot/kernel
.Ed
.Pp
In many cases this example would put far more stuff in the jail than is needed.
In the other extreme case a jail might contain only one single file:
the executable to be run in the jail.
.Pp
We recommend experimentation and caution that it is a lot easier to
start with a
.Dq fat
jail and remove things until it stops working,
than it is to start with a
.Dq thin
jail and add things until it works.
.Ss "Setting Up a Jail"
Do what was described in
.Sx "Setting Up a Jail Directory Tree"
to build the jail directory tree.
For the sake of this example, we will
assume you built it in
.Pa /data/jail/192.168.11.100 ,
named for the external jail IP address.
Substitute below as needed with your
own directory, IP addresses, and hostname.
.Pp
First, you will want to set up your real system's environment to be
.Dq jail-friendly .
For consistency, we will refer to the parent box as the
.Dq "host environment" ,
and to the jailed virtual machine as the
.Dq "jail environment" .
Generally speaking making a system jail-friendly does not require much
work if you have
.Va jail.defaults.allow_listen_override
set to 1.
This will allow all listen sockets inside the jail to overload
and override wildcard listen sockets on the host.
This methodology works extremely well as long as you restrict the IPs you
pass into the jail to avoid any security concerns, which typically means
making at least two IP aliases for each jail that you create (an external
IP and a localhost IP).
.Pp
If you do not want to allow listener socket overloading, you must modify
services you intend to leave running on the host system to listen only on
specific IPs and not all IPs, or generally only run services inside your
jails that do not conflict with services on the host system.
This can be difficult and is not recommended.
.Pp
Common services include:
.Xr inetd 8 ,
.Xr sendmail 8 ,
.Xr named 8 ,
.Xr rpcbind 8 ,
.Xr mountd 8 ,
.Xr nfsd 8 ,
.Xr sendmail 1 ,
and
.Xr named 8 .
.Pp
For the purposes of our examples below,
.Li 192.168.11.1
is the host IP and we create aliases
.Li 192.168.11.X
for each jail.
In addition, we leave
.Li 127.0.0.1
on the host only and create aliases
.Li 127.0.0.X
for each jail.
.Pp
Start any jails for the first time without configuring the network
interface so that you can clean it up a little and set up accounts.
As
with any machine (virtual or not) you will need to set a root password, time
zone, etc.
.Pp
To set the jail up for real you need to ifconfig some interface aliases.
and set jail defaults.  Here is an example:
.Pp
.Dl "sysctl jail.defaults.allow_raw_sockets=1"
.Dl "sysctl jail.defaults.allow_listen_override=1"
.Dl "ifconfig lo0 127.0.0.2 alias"
.Dl "ifconfig em0 192.168.11.100 netmask 255.255.255.0 alias"
.Pp
From within your jail you can generally run services normally. Just use
.Dq localhost
normally.  Do not inform services that localhost is 127.0.0.2.
The kernel will automatically remap 'localhost' (e.g. 127.0.0.1) to the
localhost IP you specify for the jail.  The kernel will also map the jail's
localhost IP back to 127.0.0.1 in the
.Xr accept 2 ,
.Xr getsockname 2 ,
and
.Xr getpeername 2
system calls.
.Pp
Listen sockets can be overloaded between jails and between the host and its
jails.  You can continue to use services that listen on the wildcard *.*
socket normally on both the host and its jails if you set the
.Va allow_listen_override
flag to 1, and jailed listen sockets will override any host listen sockets
listening on the wildcard address for the allowed jail IPs.
.Pp
.Dx
also allows you to overload specific ports, but the jailed service will
not receive any connections if the host is also specifically listening
on the addr/port pair that the jail is using.  If multiple jails are listening
on the same addr/port pair (as specified by the jail's IP list), and the
host is not, then only one jail will receive connections on that pair.
.Pp
In otherwords, it is still a good idea to give each jail its own local
and non-local IP address rather than have jails share.
.Pp
Now start the jail:
.Pp
.Dl "jail /data/jail/192.168.11.100 testhostname 127.0.0.2,192.168.11.100 /bin/sh"
.Pp
You will end up with a shell prompt, assuming no errors, within the jail.
You can now do the post-install configuration to set various configuration
options by editing
.Pa /etc/rc.conf ,
etc.
.Pp
.Bl -bullet -offset indent -compact
.It
Disable the port mapper
.Pa ( /etc/rc.conf :
.Li rpcbind_enable="NO" )
.It
Run
.Xr newaliases 1
to quell
.Xr sendmail 8
warnings.
.It
Disable interface configuration to quell startup warnings about
.Xr ifconfig 8
.Pq Li network_interfaces=""
.It
Configure
.Pa /etc/resolv.conf
so that name resolution within the jail will work correctly
.It
Set a root password, probably different from the real host system
.It
Set the timezone with
.Xr tzsetup 8
.It
Add accounts for users in the jail environment
.It
Install any packages that you think the environment requires
.El
.Pp
You may also want to perform any package-specific configuration (web servers,
SSH servers, etc), patch up
.Pa /etc/syslog.conf
so it logs as you would like, etc.
.Pp
Exit from the shell, and the jail will be shut down.
.Ss "Starting the Jail"
You are now ready to restart the jail and bring up the environment with
all of its daemons and other programs.
To do this, first bring up the
virtual host interface, and then start the jail's
.Pa /etc/rc
script from within the jail.
.Pp
NOTE: If you plan to allow untrusted users to have root access inside the
jail, you may wish to consider setting the
.Va jail.defaults.set_hostname_allowed
to 0.
Please see the management reasons why this is a good idea.
If you do decide to set this variable,
it must be set before starting any jails, and once each boot.
.Bd -literal -offset indent
sysctl jail.defaults.allow_raw_sockets=1
sysctl jail.defaults.allow_listen_override=1
ifconfig em0 inet alias 192.168.11.100/32
ifconfig lo0 inet alias 127.0.0.2
mount -t procfs proc /data/jail/192.168.11.100/proc
jail /data/jail/192.168.11.100 testhostname 127.0.0.2,192.168.11.100 \\
	/bin/sh /etc/rc
.Ed
.Pp
A few warnings will be produced, because most
.Xr sysctl 8
configuration variables cannot be set from within the jail, as they are
global across all jails and the host environment.
However, it should all
work properly.
You should be able to see
.Xr inetd 8 ,
.Xr syslogd 8 ,
and other processes running within the jail using
.Xr ps 1 ,
with the
.Ql J
flag appearing beside jailed processes.
You should also be able to
.Xr telnet 1
to the hostname or IP address of the jailed environment, and log
in using the accounts you created previously.
.Ss "Managing the Jail"
Normal machine shutdown commands, such as
.Xr halt 8 ,
.Xr reboot 8 ,
and
.Xr shutdown 8 ,
cannot be used successfully within the jail.
To kill all processes in a
jail, you may log into the jail and, as root, use one of the following
commands, depending on what you want to accomplish:
.Bd -literal -offset indent
kill -TERM -1
kill -KILL -1
.Ed
.Pp
This will send the
.Dv SIGTERM
or
.Dv SIGKILL
signals to all processes in the jail from within the jail.
Depending on
the intended use of the jail, you may also want to run
.Pa /etc/rc.shutdown
from within the jail.
Currently there is no way to insert new processes
into a jail, so you must first log into the jail before performing these
actions.
.Pp
To kill processes from outside the jail, you must individually identify the
PID of each process to be killed.
The
.Pa /proc/ Ns Ar pid Ns Pa /status
file contains, as its last field, the hostname of the jail in which the
process runs, or
.Dq Li -
to indicate that the process is not running within a jail.
The
.Xr ps 1
command also shows a
.Ql J
flag for processes in a jail.
However, the hostname for a jail may be, by
default, modified from within the jail, so the
.Pa /proc
status entry is unreliable by default.
To disable the setting of the hostname
from within a jail, set the
.Va jail.set_hostname_allowed
sysctl variable in the host environment to 0, which will affect all jails.
You can have this sysctl set on each boot using
.Xr sysctl.conf 5 .
Just add the following line to
.Pa /etc/sysctl.conf :
.Pp
.Dl jail.defaults.set_hostname_allowed=0
.Pp
In a future version of
.Dx ,
the mechanisms for managing jails may be
more refined.
.Ss "Sysctl MIB Entries"
Certain aspects of the jail containments environment may be modified from
the host environment using
.Xr sysctl 8
MIB variables.
For each jail there will be the same set of MIB variables as shown below but
under
.Va jail.<id>
which allows control of every jail individually.
The values of the variables under
.Va jail.defaults
will be copied to the per-jail MIB variables upon creation thus serving as
a kind of system-wide template.
.Bl -tag -width XXX
.It Va jail.jailed
This read-only MIB entry can be used to determine if a process is running
inside a jail (value is 1) or not (value is 0).
.It Va jail.defaults.allow_raw_sockets
This MIB entry determines whether or not prison root is allowed to
create raw sockets.
Setting this MIB to 1 allows utilities like
.Xr ping 8
and
.Xr traceroute 8
to operate inside the prison.
If this MIB is set, the source IP addresses are enforced to comply
with the IP address bound to the jail, regardless of whether or not the
.Dv IP_HDRINCL
flag has been set on the socket. Because raw sockets can be used to configure
and interact with various network subsystems, extra caution should be used
where privileged access to jails is given out to untrusted parties.
As such, this option is disabled by default.
.It Va jail.defaults.chflags_allowed
This MIB entry determines how a privileged user inside a jail will be
treated by
.Xr chflags 2 .
If zero, such users are treated as unprivileged, and are unable to set
or clear system file flags; if non-zero, such users are treated as
privileged, and may manipulate system file flags subject to the usual
constraints on
.Va kern.securelevel .
.It Va jail.defaults.set_hostname_allowed
This MIB entry determines whether or not processes within a jail are
allowed to change their hostname via
.Xr hostname 1
or
.Xr sethostname 3 .
In the current jail implementation, the ability to set the hostname from
within the jail can impact management tools relying on the accuracy of jail
information in
.Pa /proc .
As such, this should be disabled in environments where privileged access to
jails is given out to untrusted parties.
.It Va jail.defaults.allow_listen_override
This feature allows both the host and your jails to overload services on
the same ports.
If enabled, the services in the jails will override wildcarded services on
the host for the jail's IP list.
As a safety mechanism, any services the host specifically binds to an IP
will not be overridden.  The host has visibility to all jail IPs but
jails only have visibility to their specific IPs.
.It Va jail.defaults.socket_unixiproute_only
The jail functionality binds IPv4 and IPv6 addresses to each jail, and limits
access to other network addresses in the IPv4 and IPv6 space that may be available
in the host environment.
However, jail is not currently able to limit access to other network
protocol stacks that have not had jail functionality added to them.
As such, by default, processes within jails may only access protocols
in the following domains:
.Dv PF_LOCAL , PF_INET , PF_INET6 ,
and
.Dv PF_ROUTE ,
permitting them access to
.Ux
domain sockets,
IPv4 and IPv6 addresses, and routing sockets.
To enable access to other domains, this MIB variable may be set to 0.
.It Va jail.defaults.sysvipc_allowed
This MIB entry determines whether or not processes within a jail have access
to System V IPC primitives.
In the current jail implementation, System V primitives share a single
namespace across the host and jail environments, meaning that processes
within a jail would be able to communicate with (and potentially interfere
with) processes outside of the jail, and in other jails.
As such, this functionality is disabled by default, but can be enabled
by setting this MIB entry to 1.
.El
.Sh SEE ALSO
.Xr newaliases 1 ,
.Xr ps 1 ,
.Xr chroot 2 ,
.Xr jail 2 ,
.Xr procfs 5 ,
.Xr rc.conf 5 ,
.Xr sysctl.conf 5 ,
.Xr halt 8 ,
.Xr inetd 8 ,
.Xr jexec 8 ,
.Xr jls 8 ,
.Xr named 8 ,
.Xr pw 8 ,
.Xr reboot 8 ,
.Xr rpcbind 8 ,
.Xr sendmail 8 ,
.Xr shutdown 8 ,
.Xr sysctl 8 ,
.Xr syslogd 8 ,
.Xr tzsetup 8
.Sh HISTORY
The
.Nm
command appeared in
.Fx 4.0 .
.Pp
Support for multiple IPs and IPv6 appeared in
.Dx
1.7.
.Sh AUTHORS
.An -nosplit
The jail feature was originally written by
.An Poul-Henning Kamp
for R&D Associates
.Pa http://www.rndassociates.com/
who contributed it to
.Fx .
.Pp
.An Robert Watson
wrote the extended documentation, found a few bugs, added
a few new features, and cleaned up the userland jail environment.
.Pp
.An Victor Balada Diaz
wrote the support for multiple IPs and IPv6. Multiple IPs support
is based on work done by
.An Pawel Jakub Dawidek .
.Pp
.An Matthew Dillon
added port overloading to make configuration easier.
.Sh BUGS
Jail currently lacks strong management functionality, such as the ability
to deliver signals to all processes in a jail, and to allow access to
specific jail information via
.Xr ps 1
as opposed to
.Xr procfs 5 .
Similarly, it might be a good idea to add an
address alias flag such that daemons listening on all IPs
.Pq Dv INADDR_ANY
will not bind on that address, which would facilitate building a safe
host environment such that host daemons do not impose on services offered
from within jails.
Currently, the simplest answer is to minimize services
offered on the host, possibly limiting it to services offered from
.Xr inetd 8
which is easily configurable.
