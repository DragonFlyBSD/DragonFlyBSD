MAKE(1)                 NetBSD General Commands Manual                 MAKE(1)

NNAAMMEE
     bbmmaakkee -- maintain program dependencies

SSYYNNOOPPSSIISS
     bbmmaakkee [--BBeeiikkNNnnqqrrssttWWwwXX] [--CC _d_i_r_e_c_t_o_r_y] [--DD _v_a_r_i_a_b_l_e] [--dd _f_l_a_g_s]
           [--ff _m_a_k_e_f_i_l_e] [--II _d_i_r_e_c_t_o_r_y] [--JJ _p_r_i_v_a_t_e] [--jj _m_a_x___j_o_b_s]
           [--mm _d_i_r_e_c_t_o_r_y] [--TT _f_i_l_e] [--VV _v_a_r_i_a_b_l_e] [_v_a_r_i_a_b_l_e_=_v_a_l_u_e]
           [_t_a_r_g_e_t _._._.]

DDEESSCCRRIIPPTTIIOONN
     bbmmaakkee is a program designed to simplify the maintenance of other pro-
     grams.  Its input is a list of specifications as to the files upon which
     programs and other files depend.  If no --ff _m_a_k_e_f_i_l_e makefile option is
     given, bbmmaakkee will try to open `_m_a_k_e_f_i_l_e' then `_M_a_k_e_f_i_l_e' in order to find
     the specifications.  If the file `_._d_e_p_e_n_d' exists, it is read (see
     mkdep(1)).

     This manual page is intended as a reference document only.  For a more
     thorough description of bbmmaakkee and makefiles, please refer to _P_M_a_k_e _- _A
     _T_u_t_o_r_i_a_l.

     bbmmaakkee will prepend the contents of the _M_A_K_E_F_L_A_G_S environment variable to
     the command line arguments before parsing them.

     The options are as follows:

     --BB      Try to be backwards compatible by executing a single shell per
             command and by executing the commands to make the sources of a
             dependency line in sequence.

     --CC _d_i_r_e_c_t_o_r_y
             Change to _d_i_r_e_c_t_o_r_y before reading the makefiles or doing any-
             thing else.  If multiple --CC options are specified, each is inter-
             preted relative to the previous one: --CC _/ --CC _e_t_c is equivalent to
             --CC _/_e_t_c.

     --DD _v_a_r_i_a_b_l_e
             Define _v_a_r_i_a_b_l_e to be 1, in the global context.

     --dd _[_-_]_f_l_a_g_s
             Turn on debugging, and specify which portions of bbmmaakkee are to
             print debugging information.  Unless the flags are preceded by
             `-' they are added to the _M_A_K_E_F_L_A_G_S environment variable and will
             be processed by any child make processes.  By default, debugging
             information is printed to standard error, but this can be changed
             using the _F debugging flag.  The debugging output is always
             unbuffered; in addition, if debugging is enabled but debugging
             output is not directed to standard output, then the standard out-
             put is line buffered.  _F_l_a_g_s is one or more of the following:

             _A       Print all possible debugging information; equivalent to
                     specifying all of the debugging flags.

             _a       Print debugging information about archive searching and
                     caching.

             _C       Print debugging information about current working direc-
                     tory.

             _c       Print debugging information about conditional evaluation.

             _d       Print debugging information about directory searching and
                     caching.

             _e       Print debugging information about failed commands and
                     targets.

             _F[++]_f_i_l_e_n_a_m_e
                     Specify where debugging output is written.  This must be
                     the last flag, because it consumes the remainder of the
                     argument.  If the character immediately after the `F'
                     flag is `+', then the file will be opened in append mode;
                     otherwise the file will be overwritten.  If the file name
                     is `stdout' or `stderr' then debugging output will be
                     written to the standard output or standard error output
                     file descriptors respectively (and the `+' option has no
                     effect).  Otherwise, the output will be written to the
                     named file.  If the file name ends `.%d' then the `%d' is
                     replaced by the pid.

             _f       Print debugging information about loop evaluation.

             _g_1      Print the input graph before making anything.

             _g_2      Print the input graph after making everything, or before
                     exiting on error.

             _g_3      Print the input graph before exiting on error.

             _j       Print debugging information about running multiple
                     shells.

             _l       Print commands in Makefiles regardless of whether or not
                     they are prefixed by `@' or other "quiet" flags.  Also
                     known as "loud" behavior.

             _M       Print debugging information about "meta" mode decisions
                     about targets.

             _m       Print debugging information about making targets, includ-
                     ing modification dates.

             _n       Don't delete the temporary command scripts created when
                     running commands.  These temporary scripts are created in
                     the directory referred to by the TMPDIR environment vari-
                     able, or in _/_t_m_p if TMPDIR is unset or set to the empty
                     string.  The temporary scripts are created by mkstemp(3),
                     and have names of the form _m_a_k_e_X_X_X_X_X_X.  _N_O_T_E: This can
                     create many files in TMPDIR or _/_t_m_p, so use with care.

             _p       Print debugging information about makefile parsing.

             _s       Print debugging information about suffix-transformation
                     rules.

             _t       Print debugging information about target list mainte-
                     nance.

             _V       Force the --VV option to print raw values of variables.

             _v       Print debugging information about variable assignment.

             _w       Print entering and leaving directory messages, pre and
                     post processing.

             _x       Run shell commands with --xx so the actual commands are
                     printed as they are executed.

     --ee      Specify that environment variables override macro assignments
             within makefiles.

     --ff _m_a_k_e_f_i_l_e
             Specify a makefile to read instead of the default `_m_a_k_e_f_i_l_e'.  If
             _m_a_k_e_f_i_l_e is `--', standard input is read.  Multiple makefiles may
             be specified, and are read in the order specified.

     --II _d_i_r_e_c_t_o_r_y
             Specify a directory in which to search for makefiles and included
             makefiles.  The system makefile directory (or directories, see
             the --mm option) is automatically included as part of this list.

     --ii      Ignore non-zero exit of shell commands in the makefile.  Equiva-
             lent to specifying `--' before each command line in the makefile.

     --JJ _p_r_i_v_a_t_e
             This option should _n_o_t be specified by the user.

             When the _j option is in use in a recursive build, this option is
             passed by a make to child makes to allow all the make processes
             in the build to cooperate to avoid overloading the system.

     --jj _m_a_x___j_o_b_s
             Specify the maximum number of jobs that bbmmaakkee may have running at
             any one time.  The value is saved in _._M_A_K_E_._J_O_B_S.  Turns compati-
             bility mode off, unless the _B flag is also specified.  When com-
             patibility mode is off, all commands associated with a target are
             executed in a single shell invocation as opposed to the tradi-
             tional one shell invocation per line.  This can break traditional
             scripts which change directories on each command invocation and
             then expect to start with a fresh environment on the next line.
             It is more efficient to correct the scripts rather than turn
             backwards compatibility on.

     --kk      Continue processing after errors are encountered, but only on
             those targets that do not depend on the target whose creation
             caused the error.

     --mm _d_i_r_e_c_t_o_r_y
             Specify a directory in which to search for sys.mk and makefiles
             included via the <_f_i_l_e>-style include statement.  The --mm option
             can be used multiple times to form a search path.  This path will
             override the default system include path: /usr/share/mk.  Fur-
             thermore the system include path will be appended to the search
             path used for "_f_i_l_e"-style include statements (see the --II
             option).

             If a file or directory name in the --mm argument (or the
             MAKESYSPATH environment variable) starts with the string ".../"
             then bbmmaakkee will search for the specified file or directory named
             in the remaining part of the argument string.  The search starts
             with the current directory of the Makefile and then works upward
             towards the root of the filesystem.  If the search is successful,
             then the resulting directory replaces the ".../" specification in
             the --mm argument.  If used, this feature allows bbmmaakkee to easily
             search in the current source tree for customized sys.mk files
             (e.g., by using ".../mk/sys.mk" as an argument).

     --nn      Display the commands that would have been executed, but do not
             actually execute them unless the target depends on the .MAKE spe-
             cial source (see below).

     --NN      Display the commands which would have been executed, but do not
             actually execute any of them; useful for debugging top-level
             makefiles without descending into subdirectories.

     --qq      Do not execute any commands, but exit 0 if the specified targets
             are up-to-date and 1, otherwise.

     --rr      Do not use the built-in rules specified in the system makefile.

     --ss      Do not echo any commands as they are executed.  Equivalent to
             specifying `@@' before each command line in the makefile.

     --TT _t_r_a_c_e_f_i_l_e
             When used with the --jj flag, append a trace record to _t_r_a_c_e_f_i_l_e
             for each job started and completed.

     --tt      Rather than re-building a target as specified in the makefile,
             create it or update its modification time to make it appear up-
             to-date.

     --VV _v_a_r_i_a_b_l_e
             Print bbmmaakkee's idea of the value of _v_a_r_i_a_b_l_e, in the global con-
             text.  Do not build any targets.  Multiple instances of this
             option may be specified; the variables will be printed one per
             line, with a blank line for each null or undefined variable.  If
             _v_a_r_i_a_b_l_e contains a `$' then the value will be expanded before
             printing.

     --WW      Treat any warnings during makefile parsing as errors.

     --XX      Don't export variables passed on the command line to the environ-
             ment individually.  Variables passed on the command line are
             still exported via the _M_A_K_E_F_L_A_G_S environment variable.  This
             option may be useful on systems which have a small limit on the
             size of command arguments.

     _v_a_r_i_a_b_l_e_=_v_a_l_u_e
             Set the value of the variable _v_a_r_i_a_b_l_e to _v_a_l_u_e.  Normally, all
             values passed on the command line are also exported to sub-makes
             in the environment.  The --XX flag disables this behavior.  Vari-
             able assignments should follow options for POSIX compatibility
             but no ordering is enforced.

     There are seven different types of lines in a makefile: file dependency
     specifications, shell commands, variable assignments, include statements,
     conditional directives, for loops, and comments.

     In general, lines may be continued from one line to the next by ending
     them with a backslash (`\').  The trailing newline character and initial
     whitespace on the following line are compressed into a single space.

FFIILLEE DDEEPPEENNDDEENNCCYY SSPPEECCIIFFIICCAATTIIOONNSS
     Dependency lines consist of one or more targets, an operator, and zero or
     more sources.  This creates a relationship where the targets ``depend''
     on the sources and are usually created from them.  The exact relationship
     between the target and the source is determined by the operator that sep-
     arates them.  The three operators are as follows:

     ::     A target is considered out-of-date if its modification time is less
           than those of any of its sources.  Sources for a target accumulate
           over dependency lines when this operator is used.  The target is
           removed if bbmmaakkee is interrupted.

     !!     Targets are always re-created, but not until all sources have been
           examined and re-created as necessary.  Sources for a target accumu-
           late over dependency lines when this operator is used.  The target
           is removed if bbmmaakkee is interrupted.

     ::::    If no sources are specified, the target is always re-created.  Oth-
           erwise, a target is considered out-of-date if any of its sources
           has been modified more recently than the target.  Sources for a
           target do not accumulate over dependency lines when this operator
           is used.  The target will not be removed if bbmmaakkee is interrupted.

     Targets and sources may contain the shell wildcard values `?', `*', `[]',
     and `{}'.  The values `?', `*', and `[]' may only be used as part of the
     final component of the target or source, and must be used to describe
     existing files.  The value `{}' need not necessarily be used to describe
     existing files.  Expansion is in directory order, not alphabetically as
     done in the shell.

SSHHEELLLL CCOOMMMMAANNDDSS
     Each target may have associated with it a series of shell commands, nor-
     mally used to create the target.  Each of the commands in this script
     _m_u_s_t be preceded by a tab.  While any target may appear on a dependency
     line, only one of these dependencies may be followed by a creation
     script, unless the `::::' operator is used.

     If the first characters of the command line are any combination of `@@',
     `++', or `--', the command is treated specially.  A `@@' causes the command
     not to be echoed before it is executed.  A `++' causes the command to be
     executed even when --nn is given.  This is similar to the effect of the
     .MAKE special source, except that the effect can be limited to a single
     line of a script.  A `--' causes any non-zero exit status of the command
     line to be ignored.

     When bbmmaakkee is run in jobs mode with --jj _m_a_x___j_o_b_s, the entire script for
     the target is fed to a single instance of the shell.

     In compatibility (non-jobs) mode, each command is run in a separate
     process.  If the command contains any shell meta characters
     (`#=|^(){};&<>*?[]:$`\\n') it will be passed to the shell, otherwise
     bbmmaakkee will attempt direct execution.

     Since bbmmaakkee will chdir(2) to `_._O_B_J_D_I_R' before executing any targets, each
     child process starts with that as its current working directory.

     Makefiles should be written so that the mode of bbmmaakkee operation does not
     change their behavior.  For example, any command which needs to use
     ``cd'' or ``chdir'', without side-effect should be put in parenthesis:


           avoid-chdir-side-effects:
                   @echo Building $@ in `pwd`
                   @(cd ${.CURDIR} && ${.MAKE} $@)
                   @echo Back in `pwd`

           ensure-one-shell-regardless-of-mode:
                   @echo Building $@ in `pwd`; \
                   (cd ${.CURDIR} && ${.MAKE} $@); \
                   echo Back in `pwd`

VVAARRIIAABBLLEE AASSSSIIGGNNMMEENNTTSS
     Variables in make are much like variables in the shell, and, by tradi-
     tion, consist of all upper-case letters.

   VVaarriiaabbllee aassssiiggnnmmeenntt mmooddiiffiieerrss
     The five operators that can be used to assign values to variables are as
     follows:

     ==       Assign the value to the variable.  Any previous value is overrid-
             den.

     ++==      Append the value to the current value of the variable.

     ??==      Assign the value to the variable if it is not already defined.

     ::==      Assign with expansion, i.e. expand the value before assigning it
             to the variable.  Normally, expansion is not done until the vari-
             able is referenced.  _N_O_T_E: References to undefined variables are
             _n_o_t expanded.  This can cause problems when variable modifiers
             are used.

     !!==      Expand the value and pass it to the shell for execution and
             assign the result to the variable.  Any newlines in the result
             are replaced with spaces.

     Any white-space before the assigned _v_a_l_u_e is removed; if the value is
     being appended, a single space is inserted between the previous contents
     of the variable and the appended value.

     Variables are expanded by surrounding the variable name with either curly
     braces (`{}') or parentheses (`()') and preceding it with a dollar sign
     (`$').  If the variable name contains only a single letter, the surround-
     ing braces or parentheses are not required.  This shorter form is not
     recommended.

     If the variable name contains a dollar, then the name itself is expanded
     first.  This allows almost arbitrary variable names, however names con-
     taining dollar, braces, parenthesis, or whitespace are really best
     avoided!

     If the result of expanding a variable contains a dollar sign (`$') the
     string is expanded again.

     Variable substitution occurs at three distinct times, depending on where
     the variable is being used.

     1.   Variables in dependency lines are expanded as the line is read.

     2.   Variables in shell commands are expanded when the shell command is
          executed.

     3.   ``.for'' loop index variables are expanded on each loop iteration.
          Note that other variables are not expanded inside loops so the fol-
          lowing example code:


                .for i in 1 2 3
                a+=     ${i}
                j=      ${i}
                b+=     ${j}
                .endfor

                all:
                        @echo ${a}
                        @echo ${b}

          will print:

                1 2 3
                3 3 3

          Because while ${a} contains ``1 2 3'' after the loop is executed,
          ${b} contains ``${j} ${j} ${j}'' which expands to ``3 3 3'' since
          after the loop completes ${j} contains ``3''.

   VVaarriiaabbllee ccllaasssseess
     The four different classes of variables (in order of increasing prece-
     dence) are:

     Environment variables
             Variables defined as part of bbmmaakkee's environment.

     Global variables
             Variables defined in the makefile or in included makefiles.

     Command line variables
             Variables defined as part of the command line.

     Local variables
             Variables that are defined specific to a certain target.  The
             seven local variables are as follows:

             _._A_L_L_S_R_C   The list of all sources for this target; also known as
                       `_>'.

             _._A_R_C_H_I_V_E  The name of the archive file.

             _._I_M_P_S_R_C   In suffix-transformation rules, the name/path of the
                       source from which the target is to be transformed (the
                       ``implied'' source); also known as `_<'.  It is not
                       defined in explicit rules.

             _._M_E_M_B_E_R   The name of the archive member.

             _._O_O_D_A_T_E   The list of sources for this target that were deemed
                       out-of-date; also known as `_?'.

             _._P_R_E_F_I_X   The file prefix of the target, containing only the file
                       portion, no suffix or preceding directory components;
                       also known as `_*'.

             _._T_A_R_G_E_T   The name of the target; also known as `_@'.

             The shorter forms `_@', `_?', `_<', `_>', and `_*' are permitted for
             backward compatibility with historical makefiles and are not rec-
             ommended.  The six variables `_@_F', `_@_D', `_<_F', `_<_D', `_*_F', and
             `_*_D' are permitted for compatibility with AT&T System V UNIX
             makefiles and are not recommended.

             Four of the local variables may be used in sources on dependency
             lines because they expand to the proper value for each target on
             the line.  These variables are `_._T_A_R_G_E_T', `_._P_R_E_F_I_X', `_._A_R_C_H_I_V_E',
             and `_._M_E_M_B_E_R'.

   AAddddiittiioonnaall bbuuiilltt--iinn vvaarriiaabblleess
     In addition, bbmmaakkee sets or knows about the following variables:

     _$               A single dollar sign `$', i.e.  `$$' expands to a single
                     dollar sign.

     _._A_L_L_T_A_R_G_E_T_S     The list of all targets encountered in the Makefile.  If
                     evaluated during Makefile parsing, lists only those tar-
                     gets encountered thus far.

     _._C_U_R_D_I_R         A path to the directory where bbmmaakkee was executed.  Refer
                     to the description of `PWD' for more details.

     _._I_N_C_L_U_D_E_D_F_R_O_M_D_I_R
                     The directory of the file this Makefile was included
                     from.

     _._I_N_C_L_U_D_E_D_F_R_O_M_F_I_L_E
                     The filename of the file this Makefile was included from.

     MAKE            The name that bbmmaakkee was executed with (_a_r_g_v_[_0_]).  For
                     compatibility bbmmaakkee also sets _._M_A_K_E with the same value.
                     The preferred variable to use is the environment variable
                     MAKE because it is more compatible with other versions of
                     bbmmaakkee and cannot be confused with the special target with
                     the same name.

     _._M_A_K_E_._D_E_P_E_N_D_F_I_L_E
                     Names the makefile (default `_._d_e_p_e_n_d') from which gener-
                     ated dependencies are read.

     _._M_A_K_E_._E_X_P_A_N_D___V_A_R_I_A_B_L_E_S
                     A boolean that controls the default behavior of the --VV
                     option.

     _._M_A_K_E_._E_X_P_O_R_T_E_D  The list of variables exported by bbmmaakkee.

     _._M_A_K_E_._J_O_B_S      The argument to the --jj option.

     _._M_A_K_E_._J_O_B_._P_R_E_F_I_X
                     If bbmmaakkee is run with _j then output for each target is
                     prefixed with a token `--- target ---' the first part of
                     which can be controlled via _._M_A_K_E_._J_O_B_._P_R_E_F_I_X.  If
                     _._M_A_K_E_._J_O_B_._P_R_E_F_I_X is empty, no token is printed.
                     For example:
                     .MAKE.JOB.PREFIX=${.newline}---${.MAKE:T}[${.MAKE.PID}]
                     would produce tokens like `---make[1234] target ---' mak-
                     ing it easier to track the degree of parallelism being
                     achieved.

     MAKEFLAGS       The environment variable `MAKEFLAGS' may contain anything
                     that may be specified on bbmmaakkee's command line.  Anything
                     specified on bbmmaakkee's command line is appended to the
                     `MAKEFLAGS' variable which is then entered into the envi-
                     ronment for all programs which bbmmaakkee executes.

     _._M_A_K_E_._L_E_V_E_L     The recursion depth of bbmmaakkee.  The initial instance of
                     bbmmaakkee will be 0, and an incremented value is put into the
                     environment to be seen by the next generation.  This
                     allows tests like: .if ${.MAKE.LEVEL} == 0 to protect
                     things which should only be evaluated in the initial
                     instance of bbmmaakkee.

     _._M_A_K_E_._M_A_K_E_F_I_L_E___P_R_E_F_E_R_E_N_C_E
                     The ordered list of makefile names (default `_m_a_k_e_f_i_l_e',
                     `_M_a_k_e_f_i_l_e') that bbmmaakkee will look for.

     _._M_A_K_E_._M_A_K_E_F_I_L_E_S
                     The list of makefiles read by bbmmaakkee, which is useful for
                     tracking dependencies.  Each makefile is recorded only
                     once, regardless of the number of times read.

     _._M_A_K_E_._M_O_D_E      Processed after reading all makefiles.  Can affect the
                     mode that bbmmaakkee runs in.  It can contain a number of key-
                     words:

                     _c_o_m_p_a_t      Like --BB, puts bbmmaakkee into "compat" mode.

                     _m_e_t_a        Puts bbmmaakkee into "meta" mode, where meta files
                                 are created for each target to capture the
                                 command run, the output generated and if
                                 filemon(4) is available, the system calls
                                 which are of interest to bbmmaakkee.  The captured
                                 output can be very useful when diagnosing
                                 errors.

                     _c_u_r_d_i_r_O_k_= _b_f Normally bbmmaakkee will not create .meta files
                                 in `_._C_U_R_D_I_R'.  This can be overridden by set-
                                 ting _b_f to a value which represents True.

                     _e_n_v         For debugging, it can be useful to inlcude
                                 the environment in the .meta file.

                     _v_e_r_b_o_s_e     If in "meta" mode, print a clue about the
                                 target being built.  This is useful if the
                                 build is otherwise running silently.  The
                                 message printed the value of:
                                 _._M_A_K_E_._M_E_T_A_._P_R_E_F_I_X.

                     _i_g_n_o_r_e_-_c_m_d  Some makefiles have commands which are simply
                                 not stable.  This keyword causes them to be
                                 ignored for determining whether a target is
                                 out of date in "meta" mode.  See also
                                 ..NNOOMMEETTAA__CCMMPP.

                     _s_i_l_e_n_t_= _b_f  If _b_f is True, when a .meta file is created,
                                 mark the target ..SSIILLEENNTT.

     _._M_A_K_E_._M_E_T_A_._B_A_I_L_I_W_I_C_K
                     In "meta" mode, provides a list of prefixes which match
                     the directories controlled by bbmmaakkee.  If a file that was
                     generated outside of _._O_B_J_D_I_R but within said bailiwick is
                     missing, the current target is considered out-of-date.

     _._M_A_K_E_._M_E_T_A_._C_R_E_A_T_E_D
                     In "meta" mode, this variable contains a list of all the
                     meta files updated.  If not empty, it can be used to
                     trigger processing of _._M_A_K_E_._M_E_T_A_._F_I_L_E_S.

     _._M_A_K_E_._M_E_T_A_._F_I_L_E_S
                     In "meta" mode, this variable contains a list of all the
                     meta files used (updated or not).  This list can be used
                     to process the meta files to extract dependency informa-
                     tion.

     _._M_A_K_E_._M_E_T_A_._I_G_N_O_R_E___P_A_T_H_S
                     Provides a list of path prefixes that should be ignored;
                     because the contents are expected to change over time.
                     The default list includes: `_/_d_e_v _/_e_t_c _/_p_r_o_c _/_t_m_p _/_v_a_r_/_r_u_n
                     _/_v_a_r_/_t_m_p'

     _._M_A_K_E_._M_E_T_A_._P_R_E_F_I_X
                     Defines the message printed for each meta file updated in
                     "meta verbose" mode.  The default value is:
                           Building ${.TARGET:H:tA}/${.TARGET:T}

     _._M_A_K_E_O_V_E_R_R_I_D_E_S  This variable is used to record the names of variables
                     assigned to on the command line, so that they may be
                     exported as part of `MAKEFLAGS'.  This behaviour can be
                     disabled by assigning an empty value to `_._M_A_K_E_O_V_E_R_R_I_D_E_S'
                     within a makefile.  Extra variables can be exported from
                     a makefile by appending their names to `_._M_A_K_E_O_V_E_R_R_I_D_E_S'.
                     `MAKEFLAGS' is re-exported whenever `_._M_A_K_E_O_V_E_R_R_I_D_E_S' is
                     modified.

     _._M_A_K_E_._P_A_T_H___F_I_L_E_M_O_N
                     If bbmmaakkee was built with filemon(4) support, this is set
                     to the path of the device node.  This allows makefiles to
                     test for this support.

     _._M_A_K_E_._P_I_D       The process-id of bbmmaakkee.

     _._M_A_K_E_._P_P_I_D      The parent process-id of bbmmaakkee.

     _M_A_K_E___P_R_I_N_T___V_A_R___O_N___E_R_R_O_R
                     When bbmmaakkee stops due to an error, it prints its name and
                     the value of `_._C_U_R_D_I_R' as well as the value of any vari-
                     ables named in `_M_A_K_E___P_R_I_N_T___V_A_R___O_N___E_R_R_O_R'.

     _._n_e_w_l_i_n_e        This variable is simply assigned a newline character as
                     its value.  This allows expansions using the ::@@ modifier
                     to put a newline between iterations of the loop rather
                     than a space.  For example, the printing of
                     `_M_A_K_E___P_R_I_N_T___V_A_R___O_N___E_R_R_O_R' could be done as
                     ${MAKE_PRINT_VAR_ON_ERROR:@v@$v='${$v}'${.newline}@}.

     _._O_B_J_D_I_R         A path to the directory where the targets are built.  Its
                     value is determined by trying to chdir(2) to the follow-
                     ing directories in order and using the first match:

                     1.   ${MAKEOBJDIRPREFIX}${.CURDIR}

                          (Only if `MAKEOBJDIRPREFIX' is set in the environ-
                          ment or on the command line.)

                     2.   ${MAKEOBJDIR}

                          (Only if `MAKEOBJDIR' is set in the environment or
                          on the command line.)

                     3.   ${.CURDIR}_/_o_b_j_.${MACHINE}

                     4.   ${.CURDIR}_/_o_b_j

                     5.   _/_u_s_r_/_o_b_j_/${.CURDIR}

                     6.   ${.CURDIR}

                     Variable expansion is performed on the value before it's
                     used, so expressions such as
                           ${.CURDIR:S,^/usr/src,/var/obj,}
                     may be used.  This is especially useful with
                     `MAKEOBJDIR'.

                     `_._O_B_J_D_I_R' may be modified in the makefile as a global
                     variable.  In all cases, bbmmaakkee will chdir(2) to `_._O_B_J_D_I_R'
                     and set `PWD' to that directory before executing any tar-
                     gets.

     _._P_A_R_S_E_D_I_R       A path to the directory of the current `_M_a_k_e_f_i_l_e' being
                     parsed.

     _._P_A_R_S_E_F_I_L_E      The basename of the current `_M_a_k_e_f_i_l_e' being parsed.
                     This variable and `_._P_A_R_S_E_D_I_R' are both set only while the
                     `_M_a_k_e_f_i_l_e_s' are being parsed.  If you want to retain
                     their current values, assign them to a variable using
                     assignment with expansion: (`::==').

     _._P_A_T_H           A variable that represents the list of directories that
                     bbmmaakkee will search for files.  The search list should be
                     updated using the target `_._P_A_T_H' rather than the vari-
                     able.

     PWD             Alternate path to the current directory.  bbmmaakkee normally
                     sets `_._C_U_R_D_I_R' to the canonical path given by getcwd(3).
                     However, if the environment variable `PWD' is set and
                     gives a path to the current directory, then bbmmaakkee sets
                     `_._C_U_R_D_I_R' to the value of `PWD' instead.  This behaviour
                     is disabled if `MAKEOBJDIRPREFIX' is set or `MAKEOBJDIR'
                     contains a variable transform.  `PWD' is set to the value
                     of `_._O_B_J_D_I_R' for all programs which bbmmaakkee executes.

     .TARGETS        The list of targets explicitly specified on the command
                     line, if any.

     VPATH           Colon-separated (``:'') lists of directories that bbmmaakkee
                     will search for files.  The variable is supported for
                     compatibility with old make programs only, use `_._P_A_T_H'
                     instead.

   VVaarriiaabbllee mmooddiiffiieerrss
     Variable expansion may be modified to select or modify each word of the
     variable (where a ``word'' is white-space delimited sequence of charac-
     ters).  The general format of a variable expansion is as follows:

           ${variable[:modifier[:...]]}

     Each modifier begins with a colon, which may be escaped with a backslash
     (`\').

     A set of modifiers can be specified via a variable, as follows:

           modifier_variable=modifier[:...]
           ${variable:${modifier_variable}[:...]}

     In this case the first modifier in the modifier_variable does not start
     with a colon, since that must appear in the referencing variable.  If any
     of the modifiers in the modifier_variable contain a dollar sign (`$'),
     these must be doubled to avoid early expansion.

     The supported modifiers are:

     ::EE   Replaces each word in the variable with its suffix.

     ::HH   Replaces each word in the variable with everything but the last com-
          ponent.

     ::MM_p_a_t_t_e_r_n
          Select only those words that match _p_a_t_t_e_r_n.  The standard shell
          wildcard characters (`*', `?', and `[]') may be used.  The wildcard
          characters may be escaped with a backslash (`\').  As a consequence
          of the way values are split into words, matched, and then joined, a
          construct like
                ${VAR:M*}
          will normalise the inter-word spacing, removing all leading and
          trailing space, and converting multiple consecutive spaces to single
          spaces.

     ::NN_p_a_t_t_e_r_n
          This is identical to `::MM', but selects all words which do not match
          _p_a_t_t_e_r_n.

     ::OO   Order every word in variable alphabetically.  To sort words in
          reverse order use the `::OO::[[--11....11]]' combination of modifiers.

     ::OOxx  Randomize words in variable.  The results will be different each
          time you are referring to the modified variable; use the assignment
          with expansion (`::==') to prevent such behaviour.  For example,

                LIST=                   uno due tre quattro
                RANDOM_LIST=            ${LIST:Ox}
                STATIC_RANDOM_LIST:=    ${LIST:Ox}

                all:
                        @echo "${RANDOM_LIST}"
                        @echo "${RANDOM_LIST}"
                        @echo "${STATIC_RANDOM_LIST}"
                        @echo "${STATIC_RANDOM_LIST}"
          may produce output similar to:

                quattro due tre uno
                tre due quattro uno
                due uno quattro tre
                due uno quattro tre

     ::QQ   Quotes every shell meta-character in the variable, so that it can be
          passed safely through recursive invocations of bbmmaakkee.

     ::RR   Replaces each word in the variable with everything but its suffix.

     ::ggmmttiimmee
          The value is a format string for strftime(3), using the current
          gmtime(3).

     ::hhaasshh
          Compute a 32bit hash of the value and encode it as hex digits.

     ::llooccaallttiimmee
          The value is a format string for strftime(3), using the current
          localtime(3).

     ::ttAA  Attempt to convert variable to an absolute path using realpath(3),
          if that fails, the value is unchanged.

     ::ttll  Converts variable to lower-case letters.

     ::ttss_c
          Words in the variable are normally separated by a space on expan-
          sion.  This modifier sets the separator to the character _c.  If _c is
          omitted, then no separator is used.  The common escapes (including
          octal numeric codes), work as expected.

     ::ttuu  Converts variable to upper-case letters.

     ::ttWW  Causes the value to be treated as a single word (possibly containing
          embedded white space).  See also `::[[**]]'.

     ::ttww  Causes the value to be treated as a sequence of words delimited by
          white space.  See also `::[[@@]]'.

     ::SS/_o_l_d___s_t_r_i_n_g/_n_e_w___s_t_r_i_n_g/[11ggWW]
          Modify the first occurrence of _o_l_d___s_t_r_i_n_g in the variable's value,
          replacing it with _n_e_w___s_t_r_i_n_g.  If a `g' is appended to the last
          slash of the pattern, all occurrences in each word are replaced.  If
          a `1' is appended to the last slash of the pattern, only the first
          word is affected.  If a `W' is appended to the last slash of the
          pattern, then the value is treated as a single word (possibly con-
          taining embedded white space).  If _o_l_d___s_t_r_i_n_g begins with a caret
          (`^'), _o_l_d___s_t_r_i_n_g is anchored at the beginning of each word.  If
          _o_l_d___s_t_r_i_n_g ends with a dollar sign (`$'), it is anchored at the end
          of each word.  Inside _n_e_w___s_t_r_i_n_g, an ampersand (`&') is replaced by
          _o_l_d___s_t_r_i_n_g (without any `^' or `$').  Any character may be used as a
          delimiter for the parts of the modifier string.  The anchoring,
          ampersand and delimiter characters may be escaped with a backslash
          (`\').

          Variable expansion occurs in the normal fashion inside both
          _o_l_d___s_t_r_i_n_g and _n_e_w___s_t_r_i_n_g with the single exception that a backslash
          is used to prevent the expansion of a dollar sign (`$'), not a pre-
          ceding dollar sign as is usual.

     ::CC/_p_a_t_t_e_r_n/_r_e_p_l_a_c_e_m_e_n_t/[11ggWW]
          The ::CC modifier is just like the ::SS modifier except that the old and
          new strings, instead of being simple strings, are an extended regu-
          lar expression (see regex(3)) string _p_a_t_t_e_r_n and an ed(1)-style
          string _r_e_p_l_a_c_e_m_e_n_t.  Normally, the first occurrence of the pattern
          _p_a_t_t_e_r_n in each word of the value is substituted with _r_e_p_l_a_c_e_m_e_n_t.
          The `1' modifier causes the substitution to apply to at most one
          word; the `g' modifier causes the substitution to apply to as many
          instances of the search pattern _p_a_t_t_e_r_n as occur in the word or
          words it is found in; the `W' modifier causes the value to be
          treated as a single word (possibly containing embedded white space).
          Note that `1' and `g' are orthogonal; the former specifies whether
          multiple words are potentially affected, the latter whether multiple
          substitutions can potentially occur within each affected word.

          As for the ::SS modifier, the _p_a_t_t_e_r_n and _r_e_p_l_a_c_e_m_e_n_t are subjected to
          variable expansion before being parsed as regular expressions.

     ::TT   Replaces each word in the variable with its last component.

     ::uu   Remove adjacent duplicate words (like uniq(1)).

     ::??_t_r_u_e___s_t_r_i_n_g::_f_a_l_s_e___s_t_r_i_n_g
          If the variable name (not its value), when parsed as a .if condi-
          tional expression, evaluates to true, return as its value the
          _t_r_u_e___s_t_r_i_n_g, otherwise return the _f_a_l_s_e___s_t_r_i_n_g.  Since the variable
          name is used as the expression, :? must be the first modifier after
          the variable name itself - which will, of course, usually contain
          variable expansions.  A common error is trying to use expressions
          like
                ${NUMBERS:M42:?match:no}
          which actually tests defined(NUMBERS), to determine is any words
          match "42" you need to use something like:
                ${"${NUMBERS:M42}" != "":?match:no}.

     _:_o_l_d___s_t_r_i_n_g_=_n_e_w___s_t_r_i_n_g
          This is the AT&T System V UNIX style variable substitution.  It must
          be the last modifier specified.  If _o_l_d___s_t_r_i_n_g or _n_e_w___s_t_r_i_n_g do not
          contain the pattern matching character _% then it is assumed that
          they are anchored at the end of each word, so only suffixes or
          entire words may be replaced.  Otherwise _% is the substring of
          _o_l_d___s_t_r_i_n_g to be replaced in _n_e_w___s_t_r_i_n_g.

          Variable expansion occurs in the normal fashion inside both
          _o_l_d___s_t_r_i_n_g and _n_e_w___s_t_r_i_n_g with the single exception that a backslash
          is used to prevent the expansion of a dollar sign (`$'), not a pre-
          ceding dollar sign as is usual.

     ::@@_t_e_m_p@@_s_t_r_i_n_g@@
          This is the loop expansion mechanism from the OSF Development Envi-
          ronment (ODE) make.  Unlike ..ffoorr loops expansion occurs at the time
          of reference.  Assign _t_e_m_p to each word in the variable and evaluate
          _s_t_r_i_n_g.  The ODE convention is that _t_e_m_p should start and end with a
          period.  For example.
                ${LINKS:@.LINK.@${LN} ${TARGET} ${.LINK.}@}

          However a single character variable is often more readable:
                ${MAKE_PRINT_VAR_ON_ERROR:@v@$v='${$v}'${.newline}@}

     ::UU_n_e_w_v_a_l
          If the variable is undefined _n_e_w_v_a_l is the value.  If the variable
          is defined, the existing value is returned.  This is another ODE
          make feature.  It is handy for setting per-target CFLAGS for
          instance:
                ${_${.TARGET:T}_CFLAGS:U${DEF_CFLAGS}}
          If a value is only required if the variable is undefined, use:
                ${VAR:D:Unewval}

     ::DD_n_e_w_v_a_l
          If the variable is defined _n_e_w_v_a_l is the value.

     ::LL   The name of the variable is the value.

     ::PP   The path of the node which has the same name as the variable is the
          value.  If no such node exists or its path is null, then the name of
          the variable is used.  In order for this modifier to work, the name
          (node) must at least have appeared on the rhs of a dependency.

     ::!!_c_m_d!!
          The output of running _c_m_d is the value.

     ::sshh  If the variable is non-empty it is run as a command and the output
          becomes the new value.

     ::::==_s_t_r
          The variable is assigned the value _s_t_r after substitution.  This
          modifier and its variations are useful in obscure situations such as
          wanting to set a variable when shell commands are being parsed.
          These assignment modifiers always expand to nothing, so if appearing
          in a rule line by themselves should be preceded with something to
          keep bbmmaakkee happy.

          The `::::' helps avoid false matches with the AT&T System V UNIX style
          ::== modifier and since substitution always occurs the ::::== form is
          vaguely appropriate.

     ::::??==_s_t_r
          As for ::::== but only if the variable does not already have a value.

     ::::++==_s_t_r
          Append _s_t_r to the variable.

     ::::!!==_c_m_d
          Assign the output of _c_m_d to the variable.

     ::[[_r_a_n_g_e]]
          Selects one or more words from the value, or performs other opera-
          tions related to the way in which the value is divided into words.

          Ordinarily, a value is treated as a sequence of words delimited by
          white space.  Some modifiers suppress this behaviour, causing a
          value to be treated as a single word (possibly containing embedded
          white space).  An empty value, or a value that consists entirely of
          white-space, is treated as a single word.  For the purposes of the
          `::[[]]' modifier, the words are indexed both forwards using positive
          integers (where index 1 represents the first word), and backwards
          using negative integers (where index -1 represents the last word).

          The _r_a_n_g_e is subjected to variable expansion, and the expanded
          result is then interpreted as follows:

          _i_n_d_e_x  Selects a single word from the value.

          _s_t_a_r_t...._e_n_d
                 Selects all words from _s_t_a_r_t to _e_n_d, inclusive.  For example,
                 `::[[22....--11]]' selects all words from the second word to the last
                 word.  If _s_t_a_r_t is greater than _e_n_d, then the words are out-
                 put in reverse order.  For example, `::[[--11....11]]' selects all
                 the words from last to first.

          **      Causes subsequent modifiers to treat the value as a single
                 word (possibly containing embedded white space).  Analogous
                 to the effect of "$*" in Bourne shell.

          0      Means the same as `::[[**]]'.

          @@      Causes subsequent modifiers to treat the value as a sequence
                 of words delimited by white space.  Analogous to the effect
                 of "$@" in Bourne shell.

          ##      Returns the number of words in the value.

IINNCCLLUUDDEE SSTTAATTEEMMEENNTTSS,, CCOONNDDIITTIIOONNAALLSS AANNDD FFOORR LLOOOOPPSS
     Makefile inclusion, conditional structures and for loops  reminiscent of
     the C programming language are provided in bbmmaakkee.  All such structures
     are identified by a line beginning with a single dot (`.') character.
     Files are included with either ..iinncclluuddee <_f_i_l_e> or ..iinncclluuddee "_f_i_l_e".  Vari-
     ables between the angle brackets or double quotes are expanded to form
     the file name.  If angle brackets are used, the included makefile is
     expected to be in the system makefile directory.  If double quotes are
     used, the including makefile's directory and any directories specified
     using the --II option are searched before the system makefile directory.
     For compatibility with other versions of bbmmaakkee `include file ...' is also
     accepted.  If the include statement is written as ..--iinncclluuddee or as
     ..ssiinncclluuddee then errors locating and/or opening include files are ignored.

     Conditional expressions are also preceded by a single dot as the first
     character of a line.  The possible conditionals are as follows:

     ..eerrrroorr _m_e_s_s_a_g_e
             The message is printed along with the name of the makefile and
             line number, then bbmmaakkee will exit.

     ..eexxppoorrtt _v_a_r_i_a_b_l_e _._._.
             Export the specified global variable.  If no variable list is
             provided, all globals are exported except for internal variables
             (those that start with `.').  This is not affected by the --XX
             flag, so should be used with caution.  For compatibility with
             other bbmmaakkee programs `export variable=value' is also accepted.

             Appending a variable name to _._M_A_K_E_._E_X_P_O_R_T_E_D is equivalent to
             exporting a variable.

     ..eexxppoorrtt--eennvv _v_a_r_i_a_b_l_e _._._.
             The same as `.export', except that the variable is not appended
             to _._M_A_K_E_._E_X_P_O_R_T_E_D.  This allows exporting a value to the environ-
             ment which is different from that used by bbmmaakkee internally.

     ..iinnffoo _m_e_s_s_a_g_e
             The message is printed along with the name of the makefile and
             line number.

     ..uunnddeeff _v_a_r_i_a_b_l_e
             Un-define the specified global variable.  Only global variables
             may be un-defined.

     ..uunneexxppoorrtt _v_a_r_i_a_b_l_e _._._.
             The opposite of `.export'.  The specified global _v_a_r_i_a_b_l_e will be
             removed from _._M_A_K_E_._E_X_P_O_R_T_E_D.  If no variable list is provided,
             all globals are unexported, and _._M_A_K_E_._E_X_P_O_R_T_E_D deleted.

     ..uunneexxppoorrtt--eennvv
             Unexport all globals previously exported and clear the environ-
             ment inherited from the parent.  This operation will cause a mem-
             ory leak of the original environment, so should be used spar-
             ingly.  Testing for _._M_A_K_E_._L_E_V_E_L being 0, would make sense.  Also
             note that any variables which originated in the parent environ-
             ment should be explicitly preserved if desired.  For example:

                   .if ${.MAKE.LEVEL} == 0
                   PATH := ${PATH}
                   .unexport-env
                   .export PATH
                   .endif

             Would result in an environment containing only `PATH', which is
             the minimal useful environment.  Actually `.MAKE.LEVEL' will also
             be pushed into the new environment.

     ..wwaarrnniinngg _m_e_s_s_a_g_e
             The message prefixed by `_w_a_r_n_i_n_g_:' is printed along with the name
             of the makefile and line number.

     ..iiff [!]_e_x_p_r_e_s_s_i_o_n [_o_p_e_r_a_t_o_r _e_x_p_r_e_s_s_i_o_n _._._.]
             Test the value of an expression.

     ..iiffddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]
             Test the value of a variable.

     ..iiffnnddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]
             Test the value of a variable.

     ..iiffmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t _._._.]
             Test the target being built.

     ..iiffnnmmaakkee [!] _t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t _._._.]
             Test the target being built.

     ..eellssee   Reverse the sense of the last conditional.

     ..eelliiff [!] _e_x_p_r_e_s_s_i_o_n [_o_p_e_r_a_t_o_r _e_x_p_r_e_s_s_i_o_n _._._.]
             A combination of `..eellssee' followed by `..iiff'.

     ..eelliiffddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]
             A combination of `..eellssee' followed by `..iiffddeeff'.

     ..eelliiffnnddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]
             A combination of `..eellssee' followed by `..iiffnnddeeff'.

     ..eelliiffmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t _._._.]
             A combination of `..eellssee' followed by `..iiffmmaakkee'.

     ..eelliiffnnmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t _._._.]
             A combination of `..eellssee' followed by `..iiffnnmmaakkee'.

     ..eennddiiff  End the body of the conditional.

     The _o_p_e_r_a_t_o_r may be any one of the following:

     ||||     Logical OR.

     &&&&     Logical AND; of higher precedence than ``||''.

     As in C, bbmmaakkee will only evaluate a conditional as far as is necessary to
     determine its value.  Parentheses may be used to change the order of
     evaluation.  The boolean operator `!!' may be used to logically negate an
     entire conditional.  It is of higher precedence than `&&&&'.

     The value of _e_x_p_r_e_s_s_i_o_n may be any of the following:

     ddeeffiinneedd  Takes a variable name as an argument and evaluates to true if
              the variable has been defined.

     mmaakkee     Takes a target name as an argument and evaluates to true if the
              target was specified as part of bbmmaakkee's command line or was
              declared the default target (either implicitly or explicitly,
              see _._M_A_I_N) before the line containing the conditional.

     eemmppttyy    Takes a variable, with possible modifiers, and evaluates to true
              if the expansion of the variable would result in an empty
              string.

     eexxiissttss   Takes a file name as an argument and evaluates to true if the
              file exists.  The file is searched for on the system search path
              (see _._P_A_T_H).

     ttaarrggeett   Takes a target name as an argument and evaluates to true if the
              target has been defined.

     ccoommmmaannddss
              Takes a target name as an argument and evaluates to true if the
              target has been defined and has commands associated with it.

     _E_x_p_r_e_s_s_i_o_n may also be an arithmetic or string comparison.  Variable
     expansion is performed on both sides of the comparison, after which the
     integral values are compared.  A value is interpreted as hexadecimal if
     it is preceded by 0x, otherwise it is decimal; octal numbers are not sup-
     ported.  The standard C relational operators are all supported.  If after
     variable expansion, either the left or right hand side of a `====' or `!!=='
     operator is not an integral value, then string comparison is performed
     between the expanded variables.  If no relational operator is given, it
     is assumed that the expanded variable is being compared against 0 or an
     empty string in the case of a string comparison.

     When bbmmaakkee is evaluating one of these conditional expressions, and it
     encounters a (white-space separated) word it doesn't recognize, either
     the ``make'' or ``defined'' expression is applied to it, depending on the
     form of the conditional.  If the form is `..iiffddeeff', `..iiffnnddeeff', or `..iiff'
     the ``defined'' expression is applied.  Similarly, if the form is
     `..iiffmmaakkee' or `..iiffnnmmaakkee, tthhee' ``make'' expression is applied.

     If the conditional evaluates to true the parsing of the makefile contin-
     ues as before.  If it evaluates to false, the following lines are
     skipped.  In both cases this continues until a `..eellssee' or `..eennddiiff' is
     found.

     For loops are typically used to apply a set of rules to a list of files.
     The syntax of a for loop is:

     ..ffoorr _v_a_r_i_a_b_l_e [_v_a_r_i_a_b_l_e _._._.] iinn _e_x_p_r_e_s_s_i_o_n
     <make-rules>
     ..eennddffoorr

     After the for eexxpprreessssiioonn is evaluated, it is split into words.  On each
     iteration of the loop, one word is taken and assigned to each vvaarriiaabbllee,
     in order, and these vvaarriiaabblleess are substituted into the mmaakkee--rruulleess inside
     the body of the for loop.  The number of words must come out even; that
     is, if there are three iteration variables, the number of words provided
     must be a multiple of three.

CCOOMMMMEENNTTSS
     Comments begin with a hash (`#') character, anywhere but in a shell com-
     mand line, and continue to the end of an unescaped new line.

SSPPEECCIIAALL SSOOUURRCCEESS ((AATTTTRRIIBBUUTTEESS))
     ..EEXXEECC     Target is never out of date, but always execute commands any-
               way.

     ..IIGGNNOORREE   Ignore any errors from the commands associated with this tar-
               get, exactly as if they all were preceded by a dash (`-').

     ..MMAADDEE     Mark all sources of this target as being up-to-date.

     ..MMAAKKEE     Execute the commands associated with this target even if the --nn
               or --tt options were specified.  Normally used to mark recursive
               bbmmaakkees.

     ..MMEETTAA     Create a meta file for the target, even if it is flagged as
               ..PPHHOONNYY, ..MMAAKKEE, or ..SSPPEECCIIAALL.  Usage in conjunction with ..MMAAKKEE is
               the most likely case.  In "meta" mode, the target is out-of-
               date if the meta file is missing.

     ..NNOOMMEETTAA   Do not create a meta file for the target.  Meta files are also
               not created for ..PPHHOONNYY, ..MMAAKKEE, or ..SSPPEECCIIAALL targets.

     ..NNOOMMEETTAA__CCMMPP
               Ignore differences in commands when deciding if target is out
               of date.  This is useful if the command contains a value which
               always changes.  If the number of commands change, though, the
               target will still be out of date.  The same effect applies to
               any command line that uses the variable _._O_O_D_A_T_E, which can be
               used for that purpose even when not otherwise needed or
               desired:


                     skip-compare-for-some:
                             @echo this will be compared
                             @echo this will not ${.OODATE:M.NOMETA_CMP}
                             @echo this will also be compared

               The ::MM pattern suppresses any expansion of the unwanted vari-
               able.

     ..NNOOPPAATTHH   Do not search for the target in the directories specified by
               ..PPAATTHH.

     ..NNOOTTMMAAIINN  Normally bbmmaakkee selects the first target it encounters as the
               default target to be built if no target was specified.  This
               source prevents this target from being selected.

     ..OOPPTTIIOONNAALL
               If a target is marked with this attribute and bbmmaakkee can't fig-
               ure out how to create it, it will ignore this fact and assume
               the file isn't needed or already exists.

     ..PPHHOONNYY    The target does not correspond to an actual file; it is always
               considered to be out of date, and will not be created with the
               --tt option.  Suffix-transformation rules are not applied to
               ..PPHHOONNYY targets.

     ..PPRREECCIIOOUUSS
               When bbmmaakkee is interrupted, it normally removes any partially
               made targets.  This source prevents the target from being
               removed.

     ..RREECCUURRSSIIVVEE
               Synonym for ..MMAAKKEE.

     ..SSIILLEENNTT   Do not echo any of the commands associated with this target,
               exactly as if they all were preceded by an at sign (`@').

     ..UUSSEE      Turn the target into bbmmaakkee's version of a macro.  When the tar-
               get is used as a source for another target, the other target
               acquires the commands, sources, and attributes (except for
               ..UUSSEE) of the source.  If the target already has commands, the
               ..UUSSEE target's commands are appended to them.

     ..UUSSEEBBEEFFOORREE
               Exactly like ..UUSSEE, but prepend the ..UUSSEEBBEEFFOORREE target commands
               to the target.

     ..WWAAIITT     If ..WWAAIITT appears in a dependency line, the sources that precede
               it are made before the sources that succeed it in the line.
               Since the dependents of files are not made until the file
               itself could be made, this also stops the dependents being
               built unless they are needed for another branch of the depen-
               dency tree.  So given:

               x: a .WAIT b
                       echo x
               a:
                       echo a
               b: b1
                       echo b
               b1:
                       echo b1

               the output is always `a', `b1', `b', `x'.
               The ordering imposed by ..WWAAIITT is only relevant for parallel
               makes.

SSPPEECCIIAALL TTAARRGGEETTSS
     Special targets may not be included with other targets, i.e. they must be
     the only target specified.

     ..BBEEGGIINN   Any command lines attached to this target are executed before
              anything else is done.

     ..DDEEFFAAUULLTT
              This is sort of a ..UUSSEE rule for any target (that was used only
              as a source) that bbmmaakkee can't figure out any other way to cre-
              ate.  Only the shell script is used.  The ..IIMMPPSSRRCC variable of a
              target that inherits ..DDEEFFAAUULLTT's commands is set to the target's
              own name.

     ..EENNDD     Any command lines attached to this target are executed after
              everything else is done.

     ..EERRRROORR   Any command lines attached to this target are executed when
              another target fails.  The ..EERRRROORR__TTAARRGGEETT variable is set to the
              target that failed.  See also MMAAKKEE__PPRRIINNTT__VVAARR__OONN__EERRRROORR.

     ..IIGGNNOORREE  Mark each of the sources with the ..IIGGNNOORREE attribute.  If no
              sources are specified, this is the equivalent of specifying the
              --ii option.

     ..IINNTTEERRRRUUPPTT
              If bbmmaakkee is interrupted, the commands for this target will be
              executed.

     ..MMAAIINN    If no target is specified when bbmmaakkee is invoked, this target
              will be built.

     ..MMAAKKEEFFLLAAGGSS
              This target provides a way to specify flags for bbmmaakkee when the
              makefile is used.  The flags are as if typed to the shell,
              though the --ff option will have no effect.

     ..NNOOPPAATTHH  Apply the ..NNOOPPAATTHH attribute to any specified sources.

     ..NNOOTTPPAARRAALLLLEELL
              Disable parallel mode.

     ..NNOO__PPAARRAALLLLEELL
              Synonym for ..NNOOTTPPAARRAALLLLEELL, for compatibility with other pmake
              variants.

     ..OORRDDEERR   The named targets are made in sequence.  This ordering does not
              add targets to the list of targets to be made.  Since the depen-
              dents of a target do not get built until the target itself could
              be built, unless `a' is built by another part of the dependency
              graph, the following is a dependency loop:

              .ORDER: b a
              b: a

              The ordering imposed by ..OORRDDEERR is only relevant for parallel
              makes.

     ..PPAATTHH    The sources are directories which are to be searched for files
              not found in the current directory.  If no sources are speci-
              fied, any previously specified directories are deleted.  If the
              source is the special ..DDOOTTLLAASSTT target, then the current working
              directory is searched last.

     ..PPAATTHH.._s_u_f_f_i_x
              Like ..PPAATTHH but applies only to files with a particular suffix.
              The suffix must have been previously declared with ..SSUUFFFFIIXXEESS.

     ..PPHHOONNYY   Apply the ..PPHHOONNYY attribute to any specified sources.

     ..PPRREECCIIOOUUSS
              Apply the ..PPRREECCIIOOUUSS attribute to any specified sources.  If no
              sources are specified, the ..PPRREECCIIOOUUSS attribute is applied to
              every target in the file.

     ..SSHHEELLLL   Sets the shell that bbmmaakkee will use to execute commands.  The
              sources are a set of _f_i_e_l_d_=_v_a_l_u_e pairs.

              _n_a_m_e        This is the minimal specification, used to select
                          one of the builtin shell specs; _s_h, _k_s_h, and _c_s_h.

              _p_a_t_h        Specifies the path to the shell.

              _h_a_s_E_r_r_C_t_l   Indicates whether the shell supports exit on error.

              _c_h_e_c_k       The command to turn on error checking.

              _i_g_n_o_r_e      The command to disable error checking.

              _e_c_h_o        The command to turn on echoing of commands executed.

              _q_u_i_e_t       The command to turn off echoing of commands exe-
                          cuted.

              _f_i_l_t_e_r      The output to filter after issuing the _q_u_i_e_t com-
                          mand.  It is typically identical to _q_u_i_e_t.

              _e_r_r_F_l_a_g     The flag to pass the shell to enable error checking.

              _e_c_h_o_F_l_a_g    The flag to pass the shell to enable command echo-
                          ing.

              _n_e_w_l_i_n_e     The string literal to pass the shell that results in
                          a single newline character when used outside of any
                          quoting characters.
              Example:

              .SHELL: name=ksh path=/bin/ksh hasErrCtl=true \
                      check="set -e" ignore="set +e" \
                      echo="set -v" quiet="set +v" filter="set +v" \
                      echoFlag=v errFlag=e newline="'\n'"

     ..SSIILLEENNTT  Apply the ..SSIILLEENNTT attribute to any specified sources.  If no
              sources are specified, the ..SSIILLEENNTT attribute is applied to every
              command in the file.

     ..SSTTAALLEE   This target gets run when a dependency file contains stale
              entries, having _._A_L_L_S_R_C set to the name of that dependency file.

     ..SSUUFFFFIIXXEESS
              Each source specifies a suffix to bbmmaakkee.  If no sources are
              specified, any previously specified suffixes are deleted.  It
              allows the creation of suffix-transformation rules.

              Example:

              .SUFFIXES: .o
              .c.o:
                      cc -o ${.TARGET} -c ${.IMPSRC}

EENNVVIIRROONNMMEENNTT
     bbmmaakkee uses the following environment variables, if they exist: MACHINE,
     MACHINE_ARCH, MAKE, MAKEFLAGS, MAKEOBJDIR, MAKEOBJDIRPREFIX, MAKESYSPATH,
     PWD, and TMPDIR.

     MAKEOBJDIRPREFIX and MAKEOBJDIR may only be set in the environment or on
     the command line to bbmmaakkee and not as makefile variables; see the descrip-
     tion of `_._O_B_J_D_I_R' for more details.

FFIILLEESS
     .depend        list of dependencies
     Makefile       list of dependencies
     makefile       list of dependencies
     sys.mk         system makefile
     /usr/share/mk  system makefile directory

CCOOMMPPAATTIIBBIILLIITTYY
     The basic make syntax is compatible between different versions of make,
     however the special variables, variable modifiers and conditionals are
     not.

     The way that parallel makes are scheduled changed in NetBSD 4.0 so that
     .ORDER and .WAIT apply recursively to the dependent nodes.  The algo-
     rithms used may change again in the future.

     The way that .for loop variables are substituted changed after NetBSD 5.0
     so that they still appear to be variable expansions.  In particular this
     stops them being treated as syntax, and removes some obscure problems
     using them in .if statements.

SSEEEE AALLSSOO
     mkdep(1)

HHIISSTTOORRYY
     bbmmaakkee is derived from NetBSD make(1).  It uses autoconf to facilitate
     portability to other platforms.

     A make command appeared in Version 7 AT&T UNIX.  This make implementation
     is based on Adam De Boor's pmake program which was written for Sprite at
     Berkeley.  It was designed to be a parallel distributed make running jobs
     on different machines using a daemon called ``customs''.

     Historically the target/dependency ``FRC'' has been used to FoRCe
     rebuilding (since the target/dependency does not exist... unless someone
     creates an ``FRC'' file).

BBUUGGSS
     The make syntax is difficult to parse without actually acting of the
     data.  For instance finding the end of a variable use should involve
     scanning each the modifiers using the correct terminator for each field.
     In many places make just counts {} and () in order to find the end of a
     variable expansion.

     There is no way of escaping a space character in a filename.

NetBSD 5.1                     February 14, 2014                    NetBSD 5.1
