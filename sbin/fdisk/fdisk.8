.\" $FreeBSD: src/sbin/i386/fdisk/fdisk.8,v 1.17.2.11 2002/04/25 16:25:12 trhodes Exp $
.\"
.Dd May 8, 2025
.Dt FDISK 8
.Os
.Sh NAME
.Nm fdisk
.Nd PC slice table (MBR) maintenance program
.Sh SYNOPSIS
.Nm
.Op Fl BCEIaistux
.Op Fl b Ar bootcode
.Op Fl p Ar diskimage
.Op Fl 1234
.Op Ar disk
.Nm
.Fl f Ar configfile
.Op Fl itv
.Op Ar disk
.Sh PROLOGUE
In order for the BIOS to boot the kernel,
certain conventions must be adhered to.
Sector 0 of the disk must contain an MBR, which contain boot code,
a slice table,
and a magic number.
BIOS slices can be used to break the disk up into several pieces.
.Dx
slices are called partitions under DOS
.Dq ( partition
has another meaning under
.Dx ,
see
.Xr disklabel 8 ) .
.Dx
supports 30 MBR slices, s1-s4 will be DOS primary partitions,
s5-s30 will be DOS partitions in extended DOS partitions.
The BIOS brings in sector 0 and verifies the magic number.
The sector
0 boot code then searches the slice table to determine which
slice is marked
.Em active .
This boot code then brings in the bootstrap from the
.Em active
slice and, if marked bootable, runs it.
Under DOS,
you can have one or more slices with one
.Em active .
The DOS
.Nm
program can be used to divide space on the disk into slices and set one
.Em active .
.Sh DESCRIPTION
The
.Dx
program,
.Nm ,
serves a similar purpose to the DOS program.
The first form is used to
display slice information or to interactively edit the slice table.
The second is used to write a slice table using a
.Ar configfile
and is designed to be used by other scripts/programs.
.Pp
Options are:
.Bl -tag -width indent
.It Fl a
Change the active slice only.
Ignored if
.Fl f
is given.
.It Fl b Ar bootcode
Get the boot code from the file
.Ar bootcode .
Default is
.Pa /boot/mbr .
.It Fl p Ar diskimage
The disk image is specified as a normal file instead of as a device,
which is useful when building emulated disks for vmware, bochs, etc.\&
.It Fl B
Reinitialize the boot code contained in sector 0 of the disk.
Ignored if
.Fl f
is given.
.It Fl C
Set CHS fields to wrapped values.
Normally the CHS fields for a slice are set to all 1's if they
would otherwise wrap.
This typically causes BIOSes to properly detect
that the disk should be put in Large mode.
This option may be needed on very old PCs.
.It Fl E
Use TRIM to erase the device/partition before creating the partitions.
The operation will continue if TRIM is not supported by the device.
For use with the
.Fl I
or
.Fl u
option.
.It Fl f Ar configfile
Set slice values using the file
.Ar configfile .
The
.Ar configfile
always modifies existing slices, unless
.Fl i
is also given, in which case all existing slices are deleted (marked
as
.Dq unused )
before the
.Ar configfile
is read.
The
.Ar configfile
can be
.Sq - ,
in which case
.Ar stdin
is read.
See
.Sx CONFIGURATION FILE ,
below, for file syntax.
.Pp
.Em WARNING :
when
.Fl f
is used, you are not asked if you really want to write the slices
table (as you are in the interactive mode).
Use with caution!
.It Fl i
Initialize sector 0 of the disk.
This implies
.Fl u ,
unless
.Fl f
is given.
.It Fl I
Initialize the contents of sector 0
for one
.Dx
slice covering the entire disk.
.It Fl s
Print a summary of all slices on the disk and exit.
All other options will be ignored.
.It Fl t
Test mode; do not write slice values.
Generally used with the
.Fl f
option to see what would be written to the slice table.
Implies
.Fl v .
.It Fl u
Is used for updating (editing) sector 0 of the disk.
Ignored if
.Fl f
is given.
.It Fl v
Be verbose.
When
.Fl f
is used,
.Nm
prints out the slice table that is written to the disk.
.It Fl x
Expand the last valid slice in an existing fdisk table to fit
the device.  Used to expand traditional DOS labels when the underlying
storage has been enlarged, or the image has been copied to a larger
device.
.Pp
This feature does not work on GPT partitions, use 'gpt expand device'
instead.
.It Fl 1234
Operate on a single fdisk entry only.
Ignored if
.Fl f
is given.
.El
.Pp
The final disk name can be provided as a
.Sq bare
disk name only, e.g.\&
.Pa da0 ,
or as a fully qualified device node under
.Pa /dev .
If omitted, the disks
.Pa ad0 ,
.Pa da0
and
.Pa vkd0
are searched in that order, until one is found to respond.
.Pp
When called without options,
.Nm
prints the sector 0 slice table.
An example follows:
.Bd -literal
	******* Working on device /dev/ad0 *******
	parameters extracted from in-core disklabel are:
	cylinders=769 heads=15 sectors/track=33 (495 blks/cyl)

	parameters to be used for BIOS calculations are:
	cylinders=769 heads=15 sectors/track=33 (495 blks/cyl)

	Warning: BIOS sector numbering starts with sector 1
	Information from DOS bootblock is:
	The data for partition 1 is:
	sysid 108,(DragonFly BSD)
	    start 495, size 380160 (185 Meg), flag 0
		beg: cyl 1/ sector 1/ head 0;
		end: cyl 768/ sector 33/ head 14
	The data for partition 2 is:
	sysid 164,(unknown)
	    start 378180, size 2475 (1 Meg), flag 0
		beg: cyl 764/ sector 1/ head 0;
		end: cyl 768/ sector 33/ head 14
	The data for partition 3 is:
	<UNUSED>
	The data for partition 4 is:
	sysid 99,(ISC UNIX, other System V/386, GNU HURD or Mach)
	    start 380656, size 224234 (109 Meg), flag 80
		beg: cyl 769/ sector 2/ head 0;
		end: cyl 197/ sector 33/ head 14
.Ed
.Pp
The disk is divided into three slices that happen to fill the disk.
The second slice overlaps the end of the first.
(Used for debugging purposes.)
.Bl -tag -width "cyl, sector and head"
.It Em "sysid"
is used to label the slice.
.Dx
reserves the magic number 108 decimal (6C in hexadecimal).
.It Em start No and Em size
fields provide the start address
and size of a slice in sectors.
.It Em "flag 80"
specifies that this is the active slice.
.It Em cyl , sector No and Em head
fields are used to specify the beginning and end addresses of the slice.
.It Em Note :
these numbers are calculated using BIOS's understanding of the disk geometry
and saved in the bootblock.
.El
.Pp
The
.Fl i
and
.Fl u
flags are used to indicate that the slice data is to be updated.
Unless the
.Fl f
option is also given,
.Nm
will enter a conversational mode.
In this mode, no changes will be written to disk unless you explicitly tell
.Nm
to.
.Pp
.Nm Fdisk
will display each slice and ask whether you want to edit it.
If you say yes,
.Nm
will step through each field, show you the old value,
and ask you for a new one.
When you are done with the slice,
.Nm
will display it and ask you whether it is correct.
.Nm Fdisk
will then proceed to the next entry.
.Pp
Getting the
.Em cyl , sector ,
and
.Em head
fields correct is tricky, so by default,
they will be calculated for you;
you can specify them if you choose to though.
.Pp
After all the slices are processed,
you are given the option to change the
.Em active
slice.
Finally, when all the new data for sector 0 has been accumulated,
you are asked to confirm whether you really want to rewrite it.
.Pp
The difference between the
.Fl u
and
.Fl i
flags is that
the
.Fl u
flag just edits (updates) the fields as they appear on the disk,
while the
.Fl i
flag is used to
.Dq initialize
sector 0;
it will set up the last BIOS slice to use the whole disk for
.Dx
and make it active.
.Sh NOTES
The automatic calculation of starting cylinder etc.\& uses
a set of figures that represent what the BIOS thinks the
geometry of the drive is.
These figures are taken from the in-core disklabel by default,
but
.Nm
initially gives you an opportunity to change them.
This allows you to create a bootblock that can work with drives
that use geometry translation under the BIOS.
.Pp
If you hand craft your disk layout,
please make sure that the
.Dx
slice starts on a cylinder boundary.
A number of decisions made later may assume this.
(This might not be necessary later.)
.Pp
Editing an existing slice will most likely result in the loss of
all data in that slice.
.Pp
You should run
.Nm
interactively once or twice to see how it works.
This is completely safe as long as you answer the last question
in the negative.
There are subtleties that
.Nm
detects that are not fully explained in this manual page.
.Sh CONFIGURATION FILE
When the
.Fl f
option is given, a disk's slice table can be written using values
from a
.Ar configfile .
The syntax of this file is very simple;
each line is either a comment or a specification, as follows:
.Bl -tag -width Ds
.It Xo
.Ic #
.Ar comment ...
.Xc
Lines beginning with a
.Sq #
are comments and are ignored.
.It Xo
.Ic g
.Ar spec1
.Ar spec2
.Ar spec3
.Xc
Set the BIOS geometry used in slice calculations.
There must be
three values specified, with a letter preceding each number:
.Bl -tag -width Ds
.Sm off
.It Cm c Ar num
.Sm on
Set the number of cylinders to
.Ar num .
.Sm off
.It Cm h Ar num
.Sm on
Set the number of heads to
.Ar num .
.Sm off
.It Cm s Ar num
.Sm on
Set the number of sectors/track to
.Ar num .
.El
.Pp
These specs can occur in any order, as the leading letter determines
which value is which; however, all three must be specified.
.Pp
This line must occur before any lines that specify slice
information.
.Pp
It is an error if the following is not true:
.Bd -literal -offset indent
1 \(<= number of cylinders
1 \(<= number of heads \(<= 256
1 \(<= number of sectors/track < 64
.Ed
.Pp
The number of cylinders should be less than or equal to 1024, but this
is not enforced, although a warning will be printed.
Note that a bootable
.Dx
slice (the
.Dq Pa /
file system) must lie completely within the
first 1024 cylinders, if
.Dq packet
mode isn't used, see
.Xr boot0cfg 8 ;
if this is not true, booting may fail.
Non-bootable slices do not have this restriction.
.Pp
Example (all of these are equivalent), for a disk with 1019 cylinders,
39 heads, and 63 sectors:
.Bd -literal -offset indent
g       c1019   h39     s63
g       h39     c1019   s63
g       s63     h39     c1019
.Ed
.It Xo
.Ic p
.Ar slice
.Ar type
.Ar start
.Ar length
.Xc
Set the slice given by
.Ar slice
(1-4) to type
.Ar type ,
starting at sector
.Ar start
for
.Ar length
sectors.
.Pp
Only those slices explicitly mentioned by these lines are modified;
any slice not referenced by a
.Cm p
line will not be modified.
However, if an invalid slice table is present, or the
.Fl i
option is specified, all existing slice entries will be cleared
(marked as unused), and these
.Cm p
lines will have to be used to
explicitly set slice information.
If multiple slices need to be
set, multiple
.Cm p
lines must be specified; one for each slice.
.Pp
These slice lines must occur after any geometry specification lines,
if one is present.
.Pp
The
.Ar type
is 108 for
.Dx
slices.
Specifying a slice type of zero is
the same as clearing the slice and marking it as unused; however,
dummy values (such as
.Sq 0 )
must still be specified for
.Ar start
and
.Ar length .
.Pp
Note: the start offset will be rounded upwards to a head boundary if
necessary, and the end offset will be rounded downwards to a cylinder
boundary if necessary.
.Pp
Example: to clear slice 4 and mark it as unused:
.Bd -literal -offset indent
p       4       0       0       0
.Ed
.Pp
Example: to set slice 1 to a
.Dx
slice, starting at sector 1
for 2503871 sectors (note: these numbers will be rounded upwards and
downwards to correspond to head and cylinder boundaries):
.Bd -literal -offset indent
p       1       108     1       2503871
.Ed
.It Xo
.Ic a
.Ar slice
.Xc
Make
.Ar slice
the active slice.
Can occur anywhere in the config file, but only
one must be present.
If no
.Cm a
line is present, all slices of the disk are made inactive.
.Pp
Example: to make slice 1 the active slice:
.Bd -literal -offset indent
a       1
.Ed
.El
.Sh FILES
.Bl -tag -width /boot/mbr -compact
.It Pa /boot/mbr
The default boot code
.El
.Sh COMPATIBILITY
Due to the use of 32 bit to store the number of sectors in the MBR,
.Nm
can at most use 2^32 - 1 sectors.
For the prevalent sector size of 512B this means a maximum of 2TB.
Larger disks should be partitioned using
.Xr gpt 8 .
.Pp
The MBR that
.Nm
manipulates, is used by many different OSs, but the exact requirements seems to differ,
it can be a hassle to get multiple OSs to recognize the same MBR.
Some OSs will require that slices are located at cylinder boundaries.
.Sh SEE ALSO
.Xr boot0cfg 8 ,
.Xr disklabel 8 ,
.Xr gpt 8 ,
.Xr newfs 8
.Sh HISTORY
A version of
.Nm
first appeared in the Mach Operating System.
It was subsequently ported to
.Bx 386 .
.Sh AUTHORS
.An -nosplit
.Nm
for Mach Operating System was written by
.An Robert Baron Aq Mt rvb@cs.cmu.edu .
It was ported to
.Bx 386
by
.An Julian Elischer Aq Mt julian@tfs.com .
.Sh BUGS
Only slices s1-s4
.Pq primary DOS partitions
can be changed by
.Nm ,
s5-s30
.Pq slices in extended DOS partitions
can't be changed by
.Nm .
.Pp
The default boot code will not necessarily handle all slice types
correctly, in particular those introduced since MS-DOS 6.x.
.Pp
The entire program should be made more user-friendly.
.Pp
Most users new to
.Dx
do not understand the difference between
.Ar slice
and
.Ar partition
causing difficulty to adjust.
.Pp
You cannot use this command to completely dedicate a disk to
.Dx .
The
.Xr disklabel 8
command must be used for this.
